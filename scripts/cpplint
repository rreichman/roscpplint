#!/usr/bin/env python

import sys
try:
    from roscpplint import cpplint_wrapper
except ImportError:
    # Allows the target to work with an un-sourced workspace.
    import sys, os.path
    sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), "..", "src"))
    from roscpplint import cpplint_wrapper

# Adding default flags to cpplint.
# You can override them using global CMAKE variable roscpplint_CPP_OPTS.
# The index of injected argument is 1 because 0 is program's name
filters = [
    '-build/c++11',
    '-build/header_guard',
    '-build/include',
    '-build/namespaces',
    # Pointless legal headers.
    '-legal',
    # Doesn't work with our toolchain.
    '-readability/casting',
    '-readability/namespace',
    '-readability/todo',
    # Stylistic issue (maybe) with single-arg constructors.
    '-runtime/explicit',
    # Forces you not to use long long.
    '-runtime/int',
    # Suggests use of allocation-safe sfprintn.
    '-runtime/printf',
    '-runtime/string',
    # Gives a lot of false positives. May want to reenable at some point.
    '-runtime/threadsafe_fn',
    '-runtime/references',
    '-whitespace/indent',
]
sys.argv.insert(1, "--filter=" + ','.join(filters))
cpplint_wrapper.main()
